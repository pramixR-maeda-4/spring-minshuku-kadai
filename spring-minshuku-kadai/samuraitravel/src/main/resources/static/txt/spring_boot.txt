アノテーション
@Entity
  クラスがエンティティとして機能する

@Table (name="table_name")
  エンティティにテーブル名を指定、対応付けることができる

@Data
  クラスに有するフィールドのゲッター、セッターを自動生成することができる
  ただし、Lombokに依存するアノテーションである

@Column (name=colum_name)
  クラスに有されるフィールドにテーブル内のカラム名を指定、対応付けることができる
  ただし、一般的記述として、カラム名はスネークケース / フィールドはローワーキャメルケース である

@Id
  主キーのカラムに付属する。

@GenerateValue
  自動採番機能を付与する(@Idに属するカラムに適応される)
  strategy=GenerationType.iDENTITY で指定したカラムの列番号を利用しての値を自動生成する

@RequestMapping
  ルートパスの基準値を設定することができる
  request_mappingの記述->("/path_1/path_2") : url->"https://domain_name/path_1/path_2/~~"

@AutoWired
  複数のフィールドをコンストラクタする際、[DIコンテナ]をインスタンス登録の仲介としてコンストラクタ部分を省略することができる
  別名としてコンストラクタインジェクションと呼ばれているが、利用するメリットがある
    ・コードの可読性が向上する
    ・AとBの結合度が低くなり（独立性が高くなり）、コードの変更や追加が容易になる（メンテナンス性が向上する）
    ・テストが容易になる
  *DIコンテナ : Dependency Injectionの略。意:「依存性の注入」
